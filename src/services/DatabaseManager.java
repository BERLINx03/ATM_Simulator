package services;

import java.sql.*;

public class DatabaseManager {

    private static final String DB_URL = "jdbc:sqlite:database/atm_simulator.db";

    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL);
    }

    public static boolean validateCard(String cardNumber, String hashedPin) {

        String sql = "SELECT * FROM users WHERE card_number = ? AND hashed_pin = ?";

        try (
                /**
                 * This line establishes a connection to the database.
                 * The conn object is a resource because it connects your application to the database.
                 * By putting it in the try block,
                 * Java will automatically close it after the block finishes.
                 * */
                Connection connection = getConnection();

                /**
                 * This line prepares the SQL query that you want to execute.
                 * The stmt object is also a resource, and just like the conn,
                 * Java will automatically close it once it's no longer needed.
                 * */
                PreparedStatement statement = connection.prepareStatement(sql)
        ) {
            /**
             * sets the value of the first placeholder(bind variable - '?') to the string sent next
             * */
            statement.setString(1, cardNumber);
            statement.setString(2, hashedPin);
            /**
             * A table of data representing a database result set,
             * which is usually generated by executing a statement that queries the database.
             * it also implements AutoClosable interface as Connection and PreparedStatement
             * */
            ResultSet resultSet = statement.executeQuery();

            /**
             * Moves the cursor forward one row from its current position.
             * A ResultSet cursor is initially positioned before the first row;
             * the first call to the method next makes the first row the current row;
             * the second call makes the second row the current row, and so on.
             * If an input stream is open for the current row, a call to the method next will implicitly close it. A ResultSet object's warning chain is cleared when a new row is read.
             * Returns:
             * true if the new current row is valid; false if there are no more rows
             * Throws:
             * SQLException - if a database access error occurs or this method is called on a closed result set
             * */
            return resultSet.next();
        } catch (SQLException e) {
            System.err.println("Error while validating the card: " + e.getMessage());
            return false;
        }
    }

    public boolean depositMoney(int userId, double amount) {

        if (amount <= 0) {
            throw new IllegalArgumentException("Deposit amount must be positive.");
        }

        String checkUserQuery = "SELECT COUNT(*) FROM accounts WHERE user_id = ?";
        try (
                Connection conn = getConnection();
                PreparedStatement checkUserExistance = conn.prepareStatement(checkUserQuery);
                ){

            checkUserExistance.setInt(1,userId);

            ResultSet rs = checkUserExistance.executeQuery();
            if(rs.next() && rs.getInt(1) == 0){
                System.err.println("User:" + userId + " doesn't exists.");
                return false;
            }
        }catch (SQLException e) {
            System.err.println("Error while deposit money: " + e.getMessage());
        }


        String sql = "UPDATE accounts SET balance = balance + ? WHERE user_id = ?";

        try (
                Connection connection = getConnection();
                PreparedStatement stmt = connection.prepareStatement(sql);
                ){
            stmt.setDouble(1,amount);
            stmt.setInt(2,userId);

            int rowAffected = stmt.executeUpdate();

            return rowAffected > 0;
        } catch (SQLException e){
            System.err.println("Error while depositing money: " + e.getMessage());
            return false;
        }
    }
}
